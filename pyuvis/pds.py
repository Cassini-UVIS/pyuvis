# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/05_pds.ipynb (unless otherwise specified).

__all__ = ['CatalogFilter']

# Cell
from yarl import URL
from pathlib import Path
import hvplot.pandas  # noqa
from nbverbose.showdoc import show_doc
from planetarypy.pds.apps import find_indexes, get_index
from planetarypy.utils import iso_to_nasa_date, nasa_datetime_to_iso

# Cell
class CatalogFilter:
    "useful to make class to keep the base catalog in memory"

    def __init__(self, date: str=None):
        self.date = date
        df = get_index("cassini.uvis", "index")
        df["product_id"] = df.FILE_NAME.map(lambda x: Path(x).stem)
        df["volume"] = df.FILE_NAME.map(lambda x: x.split("/")[1])
        new_cols = ["product_id", "volume"] + list(df.columns)[:-2]
        df = df[new_cols]
        df.set_index("product_id", inplace=True)
        df.OBSERVATION_TYPE.fillna("UNKNOWN", inplace=True)
        self.df = df

    @property
    def date(self) -> str:
        return self._date

    @date.setter
    def date(self, value: str):
        self._date = value

    @property
    def uv(self):
        "return E/F_UV only"
        return self.df[self.df.index.map(lambda x: x[:3] in ["EUV", "FUV"])]

    def _get_clean_date_filter(self, date: str = None):
        date = self.date if date is None else date
        if "-" in date:
            date = date.replace("-", "_")
        return date

    def get_fuv_date(self, date: str = None):  # datestring like yyyy-jjj, e.g. 2010-198
        date = self.date if date is None else date
        _filter = "FUV" + self._get_clean_date_filter(date)
        return self.df[self.df.index.str.startswith(_filter)]

    def get_euv_date(self, date: str = None):  # datestring like yyyy-jjj
        date = self.date if date is None else date
        _filter = "EUV" + self._get_clean_date_filter(date)
        return self.df[self.df.index.str.startswith(_filter)]

    @property
    def ustare_stars(self):
        return self.uv.query("OBSERVATION_TYPE=='USTARE' and TARGET_NAME=='STAR'")

    @property
    def target_calib(self):
        return self.uv.query("TARGET_NAME=='CALIB'")

    def get_ustare_stars_date(
        self,
        date: str = None,  # datestring like yyyy-jjj
        uvtype: str = "",  # add EUV/FUV filter
    ):
        date = self.date if date is None else date
        _filter = uvtype + self._get_clean_date_filter(date)
        df = self.ustare_stars
        return df[df.index.str.contains(_filter)]