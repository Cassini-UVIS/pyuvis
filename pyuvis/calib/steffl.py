# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/06_calib.steffl.ipynb (unless otherwise specified).

__all__ = ['steffl_spica_dates', 'steffl_spica_nasa_dates', 'StefflCalib']

# Cell
import numpy as np

import holoviews as hv
import hvplot.xarray
import pandas as pd
from nbverbose.showdoc import show_doc
from planetarypy.utils import iso_to_nasa_date
from .greg import filter_spica_for_date
from ..io import UVPDS, UVISObs
from ..pds import CatalogFilter

hv.extension("bokeh")

# Cell
steffl_spica_dates = ["2001-04-3", "2002-07-17", "2003-05-19"]
steffl_spica_nasa_dates = [iso_to_nasa_date(i) for i in steffl_spica_dates]
steffl_spica_nasa_dates

# Cell
class StefflCalib:
    def __init__(
        self,
        pids,  # group of product ids for a raster run
        i=15,  # Minimum column value for evaluation (15:997)
        m=0,  # Default start scan
    ):
        self.pids = pids
        self.i = i
        self.m = m
        scan_df = pd.DataFrame({"pids": pids})
        scan_df.index.name = "m"

        stacked = []
        for m, pid in scan_df.iterrows():
            flatter = FlatFielder(pid.get(0))
            stacked.append(flatter.integrated)

        self.stacked = np.dstack(stacked)

        arr = xr.DataArray(
            self.stacked,
            dims=["spectral", "spatial", "scan"],
            coords={
                "scan": scan_df.index.values,
                "spectral": flatter.integrated.spectral,
                "spatial": flatter.integrated.spatial,
            },
        )
        arr.name = "scan_stack"
        self.arr = arr
        self.corrections = np.ones((64, 1024, 5))

    @property
    def i(self):
        return self._i

    @i.setter
    def i(self, value):
        if value < 15 or value > 997:
            raise ValueError("Column i should be within 15:997 per Steffl Calib")
        self._i = value

    @property
    def m(self):
        return self._m

    @m.setter
    def m(self, value):
        self._m = value

    @property
    def current_column_set(self):
        return [self.i, self.i + 4, self.i + 8]

    @property
    def current_scan_set(self):
        return [self.m, self.m + 5, self.m + 10]

    def plot(self):
        return self.arr.hvplot(
            x="spectral",
            y="spatial",
            cmap="viridis",
            clim=(1, 6000),
            widget_type="scrubber",
            widget_location="bottom",
        )

    def get_triplet_data(self):
        cols = []
        for col, scan in zip(self.current_column_set, self.current_scan_set):
            cols.append(self.arr.isel(spectral=col, scan=scan))
        return cols

    def get_averaged_triplet(self):
        cols = self.get_triplet_data()
        colstacked = np.stack([col.data for col in cols])
        return colstacked.mean(axis=0)

    def plot_averaged_triplet(self):
        plt.plot(self.get_averaged_triplet(), label=f"{self.i=}, {self.m=}")
        plt.xlabel("Spatial axis")
        plt.title("Corrections for column i")
        plt.legend()

    def plot_triplet(self):
        cols = self.get_triplet_data()
        plots = []
        for col, col_number in zip(cols, self.current_column_set):
            plots.append(col.hvplot(label=f"Columns {col_number}"))
        return hv.Overlay(plots)

    def plot_corrections(self, m=0):
        return hv.Raster(self.corrections[:, :, m]).opts(
            colorbar=True, tools=["hover"], width=500, clim=(None, 2)
        )